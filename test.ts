import * as assert from 'assert';

import part1InputJson from './inputs/part-1-input.json';
import part2InputJson from './inputs/part-2-input.json';
import part1Expected from './inputs/part-1-test-expected.json';
import part2Expected from './inputs/part-2-test-expected.json';

import { Vulnerability } from './src/vulnerability';
import { VulnerabilityService } from './src/vulnerability-service';

describe('Test Suite: VulnerabilityService', () => {
    describe('getHighestVulnerabilities method', () => {
        it('should return only the highest vulnerabilities', () => {
            const tested = new VulnerabilityService(part1InputJson);

            const actual = tested.getHighestVulnerabilities();
            const expected: Vulnerability[] = Object.values(part1Expected.vulnerabilities);
            
            console.log('PART-1 results: ', actual);
            assert.strictEqual(JSON.stringify(actual), JSON.stringify(expected));
        });
    });
    
    describe('getVulnerabilitiesWhereFixAvailableIsNotTrue method', () => {
        it('should return only vulnerabilities where property fixAvailable is not true', () => {
            const tested = new VulnerabilityService(part2InputJson);

            const actual = tested.getVulnerabilitiesWhereFixAvailableIsNotTrue();
            const expected: Vulnerability[] = Object.values(part2Expected.vulnerabilities);
            
            console.log('PART-2 results: ', actual);
            assert.strictEqual(JSON.stringify(actual), JSON.stringify(expected));
        });
    });
    
    describe('assembleOutputJsonString method', () => {
        it('should return a json string assembled from inputJson and filtered vulnerabilities', () => {
            const tested = new VulnerabilityService(part2InputJson);
            const inputVulnerabilities: Vulnerability[] = Object.values(part2Expected.vulnerabilities);

            const actual = tested.assembleOutputJsonString(inputVulnerabilities);
            const expected = JSON.stringify(part2Expected);
            
            assert.strictEqual(actual, expected);
        });
    });
});
