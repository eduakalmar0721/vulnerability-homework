import { Vulnerability } from './vulnerability';

type Severity = 'critical' | 'high' | 'moderate' | 'low' | 'info';

interface NameVulnerabilityPair {
    [index: string]: Vulnerability;
}

export class VulnerabilityService {
    private inputJson: any = undefined;
    private vulnerabilities: Vulnerability[] = [];

    constructor(inputJson: any){
        this.inputJson = inputJson;
        this.vulnerabilities = Object.values(inputJson.vulnerabilities);
    }

    getHighestVulnerabilities(): Vulnerability[] {
        const severitiesInOrder: Severity[] = ['critical', 'high', 'moderate', 'low', 'info'];
        const highestSeverity: Severity | undefined = severitiesInOrder
            .find(severity => this.inputJson.metadata.vulnerabilities[severity] > 0);
        
        return this.vulnerabilities.filter(vulnerability => highestSeverity === vulnerability.severity);
    }

    getVulnerabilitiesWhereFixAvailableIsNotTrue(): Vulnerability[] {
        return this.vulnerabilities
            .filter(vulnerability => !(vulnerability.fixAvailable && vulnerability.fixAvailable === true));
    }

    assembleOutputJsonString(vulnerabilities: Vulnerability[]): string {
        const pairs = {} as NameVulnerabilityPair;
        const keys = vulnerabilities.map(item => item.name);
        keys.forEach(key => pairs[key] = vulnerabilities[keys.indexOf(key)]);
        
        return JSON.stringify({
            vulnerabilities: pairs,
            auditReportVersion: this.inputJson.auditReportVersion,
            metadata: this.inputJson.metadata,
        });
    }
}
